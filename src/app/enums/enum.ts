export const I2CAddressList: number[] = [0x3, 0x4, 0x5, 0x6, 0x7, 0x78, 0x79, 0x7B, 0x7C];
 export const I3CAddressList: Record<number, eDCR> = {};
export enum eDCR {
    Generic = 0,
    Reserved_01 = 1,
    Heart_Rate_Sensor = 2,
    ECG_sensor = 3,
    EKG_sensor = 4,
    GSR = 5,
    Breathalyzer = 6,
    Glucose = 7,
    Oxymeter = 8,
    Reserved_20 = 32,
    Touch = 33,
    Gesture_TouchLess = 34,
    Grip = 35,
    Fingerprint = 36,
    Haptic = 37,
    Gesture_Acoustic_Ultrasonic = 38,
    Audio_Alarm = 39,
    Reserved_40 = 64,
    Accelerometer = 65,
    Gyroscope = 66,
    Magnetometer = 67,
    Accel_Gyro_Combo = 68,
    Accel_Mag_Combo = 69,
    Accel_Gyro_Mag_Combo = 70,
    Reserved_60 = 96,
    Ambient_Light = 97,
    Pressure = 98,
    Temperature = 99,
    Humidity = 100,
    UV_sensor = 101,
    Air_Quality = 102,
    IR_sensor = 103,
    Reserved_80 = 128,
    Proximity = 129,
    RGB = 130,
    Accelerometer_Mechanical = 131,
    Oxygen_sensor = 132,
    Mass_flow_sensor = 133,
    Switch_Solenoid_Valve_Control = 134,
    Goniometer = 135,
    Position_sensor = 136,
    Throttle_Control = 137,
    Force_Stress_Sensor = 138,
    Reserved_A0 = 160,
    NFC = 161,
    IR_Data_Link = 162,
    RF_Data_Link = 163,
    Reserved_C0 = 192,
    Bridge = 193,
    Hub = 194,
    Bus_Monitor = 195,
    Secondary_Master = 196,
    Memory = 197,
    Microcontroller = 198,
    PMIC = 199,
    IO_Expander = 200,
    Debug_Target_System = 201,
    Debug_Test_System = 202,
    Dual_Role_Debug_System = 203,
    MCTP = 204,
    Reserved_D0 = 208,
    Reserved_D1 = 209,
    Thermal_Sensor_First = 210,
    Reserved_D3 = 211,
    Differential_DIMM_Memory_First_Buffer = 212,
    Differential_DIMM_Memory_Second_Buffer = 213,
    Thermal_Sensor_Second = 214,
    Reserved_D7 = 215,
    PMIC_Second = 216,
    PMIC_First = 217,
    SPD_Hub = 218,
    Register_Clock_Divider = 219,
    PMIC_Third = 220,
    Reserved_DD = 221,
    Reserved_DE = 222,
    Reserved_DF = 223,
    Reserved_E0 = 224,
    FPGA_PLD_Configuration = 225,
    Camera_Photometer = 226,
    Camera_Shutter_Control = 227,
    Camera_Focus_Control = 228,
    Custom = 229
  }
  export const eDCRDescription: { [key in eDCR]: string } = {
    [eDCR.Generic]: "Generic Device",
    [eDCR.Reserved_01]: "Reserved (0x01)",
    [eDCR.Heart_Rate_Sensor]: "Medical - Heart Rate Sensor",
    [eDCR.ECG_sensor]: "Medical - ECG sensor",
    [eDCR.EKG_sensor]: "Medical - EKG sensor",
    [eDCR.GSR]: "Medical - GSR (Galvanic Skin Response)",
    [eDCR.Breathalyzer]: "Medical - Breathalyzer",
    [eDCR.Glucose]: "Medical - Glucose (Blood Glucose)",
    [eDCR.Oxymeter]: "Medical - Oxymeter (Blood Oxygenation)",
    [eDCR.Reserved_20]: "Reserved (0x20)",
    [eDCR.Touch]: "HMI - Touch",
    [eDCR.Gesture_TouchLess]: "HMI - Gesture TouchLess",
    [eDCR.Grip]: "HMI - Grip",
    [eDCR.Fingerprint]: "HMI - Fingerprint",
    [eDCR.Haptic]: "HMI - Haptic",
    [eDCR.Gesture_Acoustic_Ultrasonic]: "HMI - Gesture (Acoustic Ultrasonic)",
    [eDCR.Audio_Alarm]: "HMI - Audio Alarm",
    [eDCR.Reserved_40]: "Reserved (0x40)",
    [eDCR.Accelerometer]: "Navigation - Accelerometer",
    [eDCR.Gyroscope]: "Navigation - Gyroscope",
    [eDCR.Magnetometer]: "Navigation - Magnetometer",
    [eDCR.Accel_Gyro_Combo]: "Navigation - Accel/Gyro Combo",
    [eDCR.Accel_Mag_Combo]: "Navigation - Accel/Mag Combo",
    [eDCR.Accel_Gyro_Mag_Combo]: "Navigation - Accel/Gyro/Mag Combo",
    [eDCR.Reserved_60]: "Reserved (0x60)",
    [eDCR.Ambient_Light]: "Environment - Ambient Light",
    [eDCR.Pressure]: "Environment - Pressure",
    [eDCR.Temperature]: "Environment - Temperature",
    [eDCR.Humidity]: "Environment - Humidity",
    [eDCR.UV_sensor]: "Environment - UV sensor",
    [eDCR.Air_Quality]: "Environment - Air Quality",
    [eDCR.IR_sensor]: "Environment - IR sensor",
    [eDCR.Reserved_80]: "Reserved (0x80)",
    [eDCR.Proximity]: "Industrial/Automotive - Proximity",
    [eDCR.RGB]: "Industrial/Automotive - RGB",
    [eDCR.Accelerometer_Mechanical]: "Industrial/Automotive - Accelerometer Mechanical",
    [eDCR.Oxygen_sensor]: "Industrial/Automotive - Oxygen sensor",
    [eDCR.Mass_flow_sensor]: "Industrial/Automotive - Mass flow sensor",
    [eDCR.Switch_Solenoid_Valve_Control]: "Industrial/Automotive - Switch Solenoid Valve Control",
    [eDCR.Goniometer]: "Industrial/Automotive - Goniometer",
    [eDCR.Position_sensor]: "Industrial/Automotive - Position sensor",
    [eDCR.Throttle_Control]: "Industrial/Automotive - Throttle Control",
    [eDCR.Force_Stress_Sensor]: "Industrial/Automotive - Force/Stress Sensor",
    [eDCR.Reserved_A0]: "Reserved (0xA0)",
    [eDCR.NFC]: "Communication - NFC",
    [eDCR.IR_Data_Link]: "Communication - IR Data Link",
    [eDCR.RF_Data_Link]: "Communication - RF Data Link",
    [eDCR.Reserved_C0]: "Reserved (0xC0)",
    [eDCR.Bridge]: "Others - Bridge",
    [eDCR.Hub]: "Others - Hub",
    [eDCR.Bus_Monitor]: "Others - Bus Monitor",
    [eDCR.Secondary_Master]: "Others - Secondary Master",
    [eDCR.Memory]: "Others - Memory",
    [eDCR.Microcontroller]: "Others - Microcontroller",
    [eDCR.PMIC]: "Others - PMIC",
    [eDCR.IO_Expander]: "Others - IO Expander",
    [eDCR.Debug_Target_System]: "Others - Debug Target System",
    [eDCR.Debug_Test_System]: "Others - Debug and Test System",
    [eDCR.Dual_Role_Debug_System]: "Others - Dual Role Debug System",
    [eDCR.MCTP]: "Others - MCTP",
    [eDCR.Reserved_D0]: "JEDEC - Reserved for JESD403 DTI = 0000",
    [eDCR.Reserved_D1]: "JEDEC - Reserved for JESD403 DTI = 0001",
    [eDCR.Thermal_Sensor_First]: "JEDEC - Thermal Sensor -First",
    [eDCR.Reserved_D3]: "JEDEC - Reserved for JESD403 DTI = 0011",
    [eDCR.Differential_DIMM_Memory_First_Buffer]: "JEDEC - Differential DIMM Memory First Buffer",
    [eDCR.Differential_DIMM_Memory_Second_Buffer]: "JEDEC - Differential DIMM Memory Second Buffer",
    [eDCR.Thermal_Sensor_Second]: "JEDEC - Thermal Sensor -Second",
    [eDCR.Reserved_D7]: "JEDEC - Reserved for JESD403 DTI = 0111",
    [eDCR.PMIC_Second]: "JEDEC - PMIC - Second",
    [eDCR.PMIC_First]: "JEDEC - PMIC - First",
    [eDCR.SPD_Hub]: "JEDEC - SPD Hub",
    [eDCR.Register_Clock_Divider]: "JEDEC - Register Clock Divider",
    [eDCR.PMIC_Third]: "JEDEC - PMIC - Third",
    [eDCR.Reserved_DD]: "Reserved (0xDD)",
    [eDCR.Reserved_DE]: "Reserved (0xDE)",
    [eDCR.Reserved_DF]: "Reserved (0xDF)",
    [eDCR.Reserved_E0]: "Vendor-Specific Function - Reserved (0xE0)",
    [eDCR.FPGA_PLD_Configuration]: "Vendor-Specific Function - FPGA/PLD Configuration",
    [eDCR.Camera_Photometer]: "Vendor-Specific Function - Camera Photometer",
    [eDCR.Camera_Shutter_Control]: "Vendor-Specific Function - Camera Shutter Control",
    [eDCR.Camera_Focus_Control]: "Vendor-Specific Function - Camera Focus Control",
    [eDCR.Custom]: "Vendor-Specific Function - Custom"
  };
  export enum eNodeType {
    Master = 'Master',
    Sec_Master = 'Sec_Master',
    I3C_Slave = 'I3C_Slave',
    I2C_Slave = 'I2C_Slave'
  }


  export enum eDeviceType {
    Internal = "Internal",
    External = "External",
  }
  export enum eTerminationType 
   { ON  = "ON", 
     OFF = "OFF"
    }
  
  export enum eResponseFlag {
    Success = 0,
    FX3Fail = 1,
    Fail = 2,
    Connection_Fail = 3,
    Device_Not_Found = 4,
    Device_Err_Max = 5,
    Device_Err_Conflict = 6,
    Invalid_Data = 7,
    Task_Busy = 8,
    File_Not_Exist = 9,
    Trace_Invalid = 10,
    Not_Implemented = 11,
    No_Result = 12,
    TimeOut_Error = 13,
    File_Write_Fail = 14,
    Directory_Not_Exist = 15,
    Application_Exception = 16,
    Session_Not_Found = 17,
    CaptureAppNotFound = 18,
    Invalid_DataLength = 19,
    Progress = 20,
    TestCode_Not_Found = 21,
    CTS_License_Is_Not_Activated = 22,
}


  export const eResponseFlagDescriptions: { [key in eResponseFlag]: string } = {
    [eResponseFlag.Success]: "Operation Success",
    [eResponseFlag.FX3Fail]: "FX3 Detect or Status Fail",
    [eResponseFlag.Fail]: "Operation Fail",
    [eResponseFlag.Connection_Fail]: "Connection not establish with PGY I3C Hardware",
    [eResponseFlag.Device_Not_Found]: "Device not found",
    [eResponseFlag.Device_Err_Max]: "Reaches the maximum limit",
    [eResponseFlag.Device_Err_Conflict]: "One or more device having same unique Id (ex: PID, Static)",
    [eResponseFlag.Invalid_Data]: "Input data format is invalid",
    [eResponseFlag.Task_Busy]: "Task is currently busy, either stop capture or wait until the session",
    [eResponseFlag.File_Not_Exist]: "Given path does not exist",
    [eResponseFlag.Trace_Invalid]: "Invalid Trace File - Either no files or some other file found along with folder",
    [eResponseFlag.Not_Implemented]: "Not implemented",
    [eResponseFlag.No_Result]: "No result found",
    [eResponseFlag.TimeOut_Error]: "Time Out",
    [eResponseFlag.File_Write_Fail]: "File write fail",
    [eResponseFlag.Directory_Not_Exist]: "Directory does not exist",
    [eResponseFlag.Application_Exception]: "Application exception",
    [eResponseFlag.Session_Not_Found]: "Session not found",
    [eResponseFlag.CaptureAppNotFound]: "Capture app not found",
    [eResponseFlag.Invalid_DataLength]: "Invalid data length",
    [eResponseFlag.Progress]: "Operation in progress... wait for a few seconds...",
    [eResponseFlag.TestCode_Not_Found]: "Test code not found",
    [eResponseFlag.CTS_License_Is_Not_Activated]: "CTS license is not activated",
};


export enum eI2CAddressType {
  _7bAddress ,
  _8bAddress ,
  _10bAddress 
}

export enum eBoard {
  HWBoard1_0 = 0,
  HWBoard2_0 = 1,
  HWBoard4_0 = 2
}

export enum eVersion { Version_1_0, Version_1_1 }

export enum eHostDevice 
{
    NA, Master, Slave
}

export enum eModeSelection { EX_PD, CTS };

export enum eSourceType { Live, Offline };

export enum eAnalyzerMode{ I3C, I2C_only }


export enum eRxStatus { Wait, Success }

export enum eIBIInterrupt { ENINT, DISINT, NA }

export enum eVoltagePath { VariablePath, Fixed_1V }

export enum eTriggerType { Auto, Message, Packet, Advanced };



export enum eTriggerInOut {
  Trigger_IN ="Trigger_IN",
  Trigger_OUT= "Trigger_OUT",
}

export enum eTestCode {
  NA = "NA",
  Test_1_1_1 = "Test_1_1_1",
  Test_1_1_2 = "Test_1_1_2",
  Test_1_1_3 = "Test_1_1_3",
  Test_1_1_4 = "Test_1_1_4",
  Test_1_1_5 = "Test_1_1_5",
  Test_1_1_6 = "Test_1_1_6",
  Test_1_1_7_1 = "Test_1_1_7_1",
  Test_1_1_7_2 = "Test_1_1_7_2",
  Test_1_1_8 = "Test_1_1_8",
  Test_1_1_9_1 = "Test_1_1_9_1",
  Test_1_1_9_2_A = "Test_1_1_9_2_A",
  Test_1_1_9_2_B = "Test_1_1_9_2_B",
  Test_1_1_9_2_C = "Test_1_1_9_2_C",
  Test_1_1_9_3_A = "Test_1_1_9_3_A",
  Test_1_1_9_3_B = "Test_1_1_9_3_B",
  Test_1_1_10 = "Test_1_1_10",
  Test_1_1_11_1 = "Test_1_1_11_1",
  Test_1_1_11_2 = "Test_1_1_11_2",
  Test_1_1_11_3 = "Test_1_1_11_3",
  Test_1_1_12 = "Test_1_1_12",
  Test_1_1_13 = "Test_1_1_13",
  Test_1_1_14 = "Test_1_1_14",
  Test_1_2_1_1 = "Test_1_2_1_1",
  Test_1_2_1_2 = "Test_1_2_1_2",
  Test_1_2_1_3 = "Test_1_2_1_3",
  Test_1_2_2_1 = "Test_1_2_2_1",
  Test_1_2_2_2 = "Test_1_2_2_2",
  Test_1_2_2_3 = "Test_1_2_2_3",
  Test_1_2_3 = "Test_1_2_3",
  Test_1_2_4_1 = "Test_1_2_4_1",
  Test_1_2_4_2 = "Test_1_2_4_2",
  Test_1_2_5 = "Test_1_2_5",
  Test_1_2_6_1 = "Test_1_2_6_1",
  Test_1_2_6_2 = "Test_1_2_6_2",
  Test_1_2_6_3 = "Test_1_2_6_3",
  Test_1_2_7_1 = "Test_1_2_7_1",
  Test_1_2_7_2 = "Test_1_2_7_2",
  Test_1_2_7_3 = "Test_1_2_7_3",
  Test_1_2_8 = "Test_1_2_8",
  Test_1_2_9 = "Test_1_2_9",
  Test_1_2_10 = "Test_1_2_10",
  Test_1_2_11 = "Test_1_2_11",
  Test_1_2_12 = "Test_1_2_12",
  Test_1_2_13 = "Test_1_2_13",
  Test_1_2_14 = "Test_1_2_14",
  Test_1_3_1 = "Test_1_3_1",
  Test_1_3_2 = "Test_1_3_2",
  Test_1_3_3_1 = "Test_1_3_3_1",
  Test_1_3_3_2 = "Test_1_3_3_2",
  Test_2_1_1 = "Test_2_1_1",
  Test_2_1_2 = "Test_2_1_2",
  Test_2_1_3_1 = "Test_2_1_3_1",
  Test_2_1_3_2 = "Test_2_1_3_2",
  Test_2_1_3_3 = "Test_2_1_3_3",
  Test_2_1_3_4 = "Test_2_1_3_4",
  Test_2_1_3_5 = "Test_2_1_3_5",
  Test_2_1_3_6 = "Test_2_1_3_6",
  Test_2_1_3_7 = "Test_2_1_3_7",
  Test_2_1_4_1 = "Test_2_1_4_1",
  Test_2_1_4_2 = "Test_2_1_4_2",
  Test_2_1_5 = "Test_2_1_5",
  Test_2_1_6_1 = "Test_2_1_6_1",
  Test_2_1_6_2 = "Test_2_1_6_2",
  Test_2_1_7_1 = "Test_2_1_7_1",
  Test_2_1_7_2 = "Test_2_1_7_2",
  Test_2_1_8_1 = "Test_2_1_8_1",
  Test_2_1_8_2 = "Test_2_1_8_2",
  Test_2_1_8_3 = "Test_2_1_8_3",
  Test_2_1_8_4 = "Test_2_1_8_4",
  Test_2_1_9_1 = "Test_2_1_9_1",
  Test_2_1_9_2 = "Test_2_1_9_2",
  Test_2_1_9_3 = "Test_2_1_9_3",
  Test_2_1_10_1 = "Test_2_1_10_1",
  Test_2_1_10_2 = "Test_2_1_10_2",
  Test_2_1_10_3 = "Test_2_1_10_3",
  Test_2_1_10_4 = "Test_2_1_10_4",
  Test_2_1_11_1 = "Test_2_1_11_1",
  Test_2_1_11_2 = "Test_2_1_11_2",
  Test_2_1_11_3 = "Test_2_1_11_3",
  Test_2_1_11_4 = "Test_2_1_11_4",
  Test_2_1_12 = "Test_2_1_12",
  Test_2_1_13 = "Test_2_1_13",
  Test_2_1_14 = "Test_2_1_14",
  Test_2_1_15 = "Test_2_1_15",
  Test_2_2_1_1 = "Test_2_2_1_1",
  Test_2_2_1_2 = "Test_2_2_1_2",
  Test_2_2_1_3 = "Test_2_2_1_3",
  Test_2_2_2_1 = "Test_2_2_2_1",
  Test_2_2_2_2 = "Test_2_2_2_2",
  Test_2_2_2_3 = "Test_2_2_2_3",
  Test_2_2_2_4 = "Test_2_2_2_4",
  Test_2_2_3_1 = "Test_2_2_3_1",
  Test_2_2_3_2 = "Test_2_2_3_2",
  Test_2_3_1_1 = "Test_2_3_1_1",
  Test_2_3_1_2 = "Test_2_3_1_2",
  Test_2_3_2_1 = "Test_2_3_2_1",
  Test_2_3_2_2 = "Test_2_3_2_2",
  Test_2_3_3 = "Test_2_3_3",
  Test_2_3_4_1 = "Test_2_3_4_1",
  Test_2_3_4_2 = "Test_2_3_4_2",
  Test_2_3_5 = "Test_2_3_5",
  Test_2_3_6 = "Test_2_3_6",
  Test_2_4_1_1 = "Test_2_4_1_1",
  Test_2_4_1_2 = "Test_2_4_1_2",
  Test_2_4_1_3 = "Test_2_4_1_3",
  Test_2_4_1_4_a = "Test_2_4_1_4_a",
  Test_2_4_1_4_b = "Test_2_4_1_4_b"
}

export enum eSlaveVersionList{
  Normal_Slave,
  Dedicated_Slave
}


export enum eBroadcastCCC {
  ENEC = 0,
  DISEC,
  ENTAS0,
  ENTAS1,
  ENTAS2,
  ENTAS3,
  RSTDAA,
  ENTDAA,
  DEFSLVS,
  SETMWL,
  SETMRL,
  ENTTM,
  SETBUSCON,
  ENDXFER = 0x12,
  ENTHDR0 = 0x20,
  ENTHDR1,
  ENTHDR2,
  ENTHDR3,
  ENTHDR4,
  ENTHDR5,
  ENTHDR6,
  ENTHDR7,
  SETXTIME,
  SETAASA,
  RSTACT,
  DEFGRPA,
  RSTGRPA,
  SETHID = 0x61,
  DEVCTRL
}

export const eBroadcastCCCDescriptions: { [key in eBroadcastCCC]: string } = {
  [eBroadcastCCC.ENEC]: "Enable Events Command",
  [eBroadcastCCC.DISEC]: "Disable Events Command",
  [eBroadcastCCC.ENTAS0]: "Enter Activity State 0",
  [eBroadcastCCC.ENTAS1]: "Enter Activity State 1",
  [eBroadcastCCC.ENTAS2]: "Enter Activity State 2",
  [eBroadcastCCC.ENTAS3]: "Enter Activity State 3",
  [eBroadcastCCC.RSTDAA]: "Reset Dynamic Address Assignment",
  [eBroadcastCCC.ENTDAA]: "Enter Dynamic Address Assignment",
  [eBroadcastCCC.DEFSLVS]: "Define List of Slaves",
  [eBroadcastCCC.SETMWL]: "Set Max Write Length",
  [eBroadcastCCC.SETMRL]: "Set Max Read Length",
  [eBroadcastCCC.ENTTM]: "Enter Test Mode",
  [eBroadcastCCC.SETBUSCON]: "SET BUS CON",
  [eBroadcastCCC.ENDXFER]: "ENDXFER",
  [eBroadcastCCC.ENTHDR0]: "Enter HDR Mode 0",
  [eBroadcastCCC.ENTHDR1]: "Enter HDR Mode 1",
  [eBroadcastCCC.ENTHDR2]: "Enter HDR Mode 2",
  [eBroadcastCCC.ENTHDR3]: "Enter HDR Mode 3",
  [eBroadcastCCC.ENTHDR4]: "Enter HDR Mode 4",
  [eBroadcastCCC.ENTHDR5]: "Enter HDR Mode 5",
  [eBroadcastCCC.ENTHDR6]: "Enter HDR Mode 6",
  [eBroadcastCCC.ENTHDR7]: "Enter HDR Mode 7",
  [eBroadcastCCC.SETXTIME]: "Exchange Timing Information",
  [eBroadcastCCC.SETAASA]: "Set AASA",
  [eBroadcastCCC.RSTACT]: "Reset ACT",
  [eBroadcastCCC.DEFGRPA]: "Define Group A",
  [eBroadcastCCC.RSTGRPA]: "Reset Group A",
  [eBroadcastCCC.SETHID]: "Set HID",
  [eBroadcastCCC.DEVCTRL]: "Device Control"
};


export enum eDirectedCCC {
  ENEC = 0x80,         
  DISEC,            
  ENTAS0,           
  ENTAS1,            
  ENTAS2,            
  ENTAS3,          
  RSTDAA,              
  SETDASA,          
  SETNEWDA,           
  SETMWL,            
  SETMRL,             
  GETMWL,             
  GETMRL,              
  GETPID,              
  GETBCR,             
  GETDCR,              
  GETSTATUS,          
  GETACCMST,           
  ENDXFER,
  SETBRGTGT,
  GETMXDS,
  GETCAPS,
  SETROUTE,
  D2DXFER,
  SETXTIME,
  GETXTIME,
  RSTACT,
  SETGRPA,
  RSTGRPA,
  MLANE,
  DEVCAP = 0xE0
}

// Mapping for descriptions
export const eDirectedCCCDescriptions: { [key in eDirectedCCC]: string } = {
  [eDirectedCCC.ENEC]: "Enable Events Command",
  [eDirectedCCC.DISEC]: "Disable Events Command",
  [eDirectedCCC.ENTAS0]: "Enter Activity State 0",
  [eDirectedCCC.ENTAS1]: "Enter Activity State 1",
  [eDirectedCCC.ENTAS2]: "Enter Activity State 2",
  [eDirectedCCC.ENTAS3]: "Enter Activity State 3",
  [eDirectedCCC.RSTDAA]: "Reset Dynamic Address Assignment",
  [eDirectedCCC.SETDASA]: "Set Dynamic Address from Static Address",
  [eDirectedCCC.SETNEWDA]: "Set New Dynamic Address",
  [eDirectedCCC.SETMWL]: "Set Max Write Length",
  [eDirectedCCC.SETMRL]: "Set Max Write Length",
  [eDirectedCCC.GETMWL]: "Get Max Write Length",
  [eDirectedCCC.GETMRL]: "Get Max Read Length",
  [eDirectedCCC.GETPID]: "Get Provisional ID",
  [eDirectedCCC.GETBCR]: "Get Bus Characteristics Register",
  [eDirectedCCC.GETDCR]: "Get Device Characteristics Register",
  [eDirectedCCC.GETSTATUS]: "Get Device Status",
  [eDirectedCCC.GETACCMST]: "Get Accept Mastership",
  [eDirectedCCC.ENDXFER]: "End Transfer",
  [eDirectedCCC.SETBRGTGT]: "Set Bridge Target",
  [eDirectedCCC.GETMXDS]: "Get Maximum Data Size",
  [eDirectedCCC.GETCAPS]: "Get Capabilities",
  [eDirectedCCC.SETROUTE]: "Set Route",
  [eDirectedCCC.D2DXFER]: "Device-to-Device Transfer",
  [eDirectedCCC.SETXTIME]: "Set Extended Time",
  [eDirectedCCC.GETXTIME]: "Get Extended Time",
  [eDirectedCCC.RSTACT]: "Reset Activity",
  [eDirectedCCC.SETGRPA]: "Set Group Address",
  [eDirectedCCC.RSTGRPA]: "Reset Group Address",
  [eDirectedCCC.MLANE]: "Multi-Lane",
  [eDirectedCCC.DEVCAP]: "Device Capability"
};

export enum eScriptType {
  Sys = 0,
  SysOD = 1,
  Bus = 2,
  BusExtend = 3,
  Loop = 4,
  BufferAccess = 5,
  SysExtended = 6,
  CTS = 7,
  ExtendedErrors = 8,
  ScalingFactor = 9,
  NA = 10
}
export enum eFrequencyUnit {
  Khz = 0,
  Mhz = 1,
  Hz = 2
}

export enum eImgRes {
  sec = "sec",
  ms = "ms",
  us = "us",
  ns = "ns"
}
export enum eI2CMode {
  OD = "OD",
  PP = "PP",
  NA = "NA"
}
export enum eACKCycle {
  Half = "Half",
  Full = "Full",
  NA = "NA"
}

export enum eMessageType {

  BroadCast = "BroadCast",
  Directed = "Directed",
  Private = "Private",
  I2cMessage = "I2cMessage"
}

export enum TransferType {
  Write = "Write",
  Read = "Read"
}

export enum eTransferType {
  NA = -1,
  Write = 0,
  Read = 1,
  Both = 2,
}

export enum eMajorFrame {
 
  Broadcast_ENEC,

  Broadcast_DISEC,

  Broadcast_ENTAS0,

  Broadcast_ENTAS1,
 
  Broadcast_ENTAS2,
  
  Broadcast_ENTAS3,
  
  Broadcast_RSTDAA,

  Broadcast_ENTDAA,
 
  Broadcast_DEFSLVS,

  Broadcast_SETMWL,

  Broadcast_SETMRL,
 
  Broadcast_ENTTM,
 
  Broadcast_SETBUSCON = 0x0c,
  Broadcast_MIPI_RESERVED_0x0D,
  Broadcast_MIPI_RESERVED_0x0E,
  Broadcast_MIPI_RESERVED_0x0F,
  Broadcast_MIPI_RESERVED_0x10,
  Broadcast_MIPI_RESERVED_0x11,
  Broadcast_ENDXFER,
  Broadcast_MIPI_RESERVED_0x13,
  Broadcast_MIPI_RESERVED_0x14,
  Broadcast_MIPI_RESERVED_0x15,
  Broadcast_MIPI_RESERVED_0x16,
  Broadcast_MIPI_RESERVED_0x17,
  Broadcast_MIPI_RESERVED_0x18,
  Broadcast_MIPI_RESERVED_0x19,
  Broadcast_MIPI_RESERVED_0x1A,
  Broadcast_MIPI_RESERVED_0x1B,
  Broadcast_MIPI_RESERVED_0x1C,
  Broadcast_MIPI_RESERVED_0x1D,
  Broadcast_MIPI_RESERVED_0x1E,
  Broadcast_MIPI_RESERVED_0x1F,
 

  Broadcast_ENTHDR0 = 0x20,
 
  Broadcast_ENTHDR1,

  Broadcast_ENTHDR2,

  Broadcast_ENTHDR3,

  Broadcast_ENTHDR4,

  Broadcast_ENTHDR5,
 
  Broadcast_ENTHDR6,

  Broadcast_ENTHDR7,

  Broadcast_SETXTIME,
 
  Broadcast_SETAASA,
  Broadcast_RSTACT,
  Broadcast_DEFGRPA,
  Broadcast_RSTGRPA,
  Broadcast_MLANE,
  Broadcast_SENSOR_WG_0X2E,
  Broadcast_SENSOR_WG_0X2F,
  Broadcast_SENSOR_WG_0X30,
  Broadcast_SENSOR_WG_0X31,
  Broadcast_SENSOR_WG_0X32,
  Broadcast_SENSOR_WG_0X33,
  Broadcast_SENSOR_WG_0X34,
  Broadcast_SENSOR_WG_0X35,
  Broadcast_SENSOR_WG_0X36,
  Broadcast_SENSOR_WG_0X37,
  Broadcast_SENSOR_WG_0X38,
  Broadcast_SENSOR_WG_0X39,
  Broadcast_SENSOR_WG_0X3A,
  Broadcast_SENSOR_WG_0X3B,
  Broadcast_SENSOR_WG_0X3C,
  Broadcast_SENSOR_WG_0X3D,
  Broadcast_SENSOR_WG_0X3E,
  Broadcast_SENSOR_WG_0X3F,
  Broadcast_SENSOR_WG_0X40,
  Broadcast_SENSOR_WG_0X41,
  Broadcast_SENSOR_WG_0X42,
  Broadcast_SENSOR_WG_0X43,
  Broadcast_SENSOR_WG_0X44,
  Broadcast_SENSOR_WG_0X45,
  Broadcast_SENSOR_WG_0X46,
  Broadcast_SENSOR_WG_0X47,
  Broadcast_SENSOR_WG_0X48,
 
  Broadcast_NON_SENSOR_WG_0X49,
  Broadcast_NON_SENSOR_WG_0X4A,
  Broadcast_NON_SENSOR_WG_0X4B,
  Broadcast_NON_SENSOR_WG_0X4C,
  Broadcast_NON_SENSOR_WG_0X4D,
  Broadcast_NON_SENSOR_WG_0X4E,
  Broadcast_NON_SENSOR_WG_0X4F,
  Broadcast_NON_SENSOR_WG_0X50,
  Broadcast_NON_SENSOR_WG_0X51,
  Broadcast_NON_SENSOR_WG_0X52,
  Broadcast_NON_SENSOR_WG_0X53,
  Broadcast_NON_SENSOR_WG_0X54,
  Broadcast_NON_SENSOR_WG_0X55,
  Broadcast_NON_SENSOR_WG_0X56,
  Broadcast_NON_SENSOR_WG_0X57,
 
  Broadcast_DEBUG_WG_0X58,
  Broadcast_DEBUG_WG_0X59,
  Broadcast_DEBUG_WG_0X5A,
  Broadcast_DEBUG_WG_0X5B,
 
  Broadcast_RIO_WG_0X5C,
  Broadcast_RIO_WG_0X5D,
  Broadcast_RIO_WG_0X5E,
  Broadcast_RIO_WG_0X5F,
  Broadcast_RIO_WG_0X60,
 
  Broadcast_SETHID,
  Broadcast_DEVCTRL,
  Broadcast_VENDOR_EXT_63,
  Broadcast_VENDOR_EXT_64,
  Broadcast_VENDOR_EXT_65,
  Broadcast_VENDOR_EXT_66,
  Broadcast_VENDOR_EXT_67,
  Broadcast_VENDOR_EXT_68,
  Broadcast_VENDOR_EXT_69,
  Broadcast_VENDOR_EXT_6A,
  Broadcast_VENDOR_EXT_6B,
  Broadcast_VENDOR_EXT_6C,
  Broadcast_VENDOR_EXT_6D,
  Broadcast_VENDOR_EXT_6E,
  Broadcast_VENDOR_EXT_6F,
  Broadcast_VENDOR_EXT_70,
  Broadcast_VENDOR_EXT_71,
  Broadcast_VENDOR_EXT_72,
  Broadcast_VENDOR_EXT_73,
  Broadcast_VENDOR_EXT_74,
  Broadcast_VENDOR_EXT_75,
  Broadcast_VENDOR_EXT_76,
  Broadcast_VENDOR_EXT_77,
  Broadcast_VENDOR_EXT_78,
  Broadcast_VENDOR_EXT_79,
  Broadcast_VENDOR_EXT_7A,
  Broadcast_VENDOR_EXT_7B,
  Broadcast_VENDOR_EXT_7C,
  Broadcast_VENDOR_EXT_7D,
  Broadcast_VENDOR_EXT_7E,
  Broadcast_VENDOR_EXT_7F,
 
 
  Directed_ENEC = 0x80,
 
  Directed_DISEC,

  Directed_ENTAS0,

  Directed_ENTAS1,
 
  Directed_ENTAS2,

  Directed_ENTAS3,
 
  Directed_RSTDAA,
 
  Directed_SETDASA,

  Directed_SETNEWDA,

  Directed_SETMWL,
  
  Directed_SETMRL,

  Directed_GETMWL,

  Directed_GETMRL,
 
  Directed_GETPID,
 
  Directed_GETBCR,

  Directed_GETDCR,

  Directed_GETSTATUS,
 
  Directed_GETACCMST,
  Directed_ENDXFER,
  Directed_SETBRGTGT,
  Directed_GETMXDS,
  Directed_GETCAPS,
  Directed_SETROUTE,
  Directed_D2DXFER,
  Directed_SETXTIME,
  Directed_GETXTIME,
  Directed_RSTACT,
  Directed_SETGRPA,
  Directed_RSTGRPA,
  Directed_MLANE,
  Directed_SENSOR_WG_0x9E,
  Directed_SENSOR_WG_0x9F,
  Directed_SENSOR_WG_0xA0,
  Directed_SENSOR_WG_0xA1,
  Directed_SENSOR_WG_0xA2,
  Directed_SENSOR_WG_0xA3,
  Directed_SENSOR_WG_0xA4,
  Directed_SENSOR_WG_0xA5,
  Directed_SENSOR_WG_0xA6,
  Directed_SENSOR_WG_0xA7,
  Directed_SENSOR_WG_0xA8,
  Directed_SENSOR_WG_0xA9,
  Directed_SENSOR_WG_0xAA,
  Directed_SENSOR_WG_0xAB,
  Directed_SENSOR_WG_0xAC,
  Directed_SENSOR_WG_0xAD,
  Directed_SENSOR_WG_0xAE,
  Directed_SENSOR_WG_0xAF,
  Directed_SENSOR_WG_0xB0,
  Directed_SENSOR_WG_0xB1,
  Directed_SENSOR_WG_0xB2,
  Directed_SENSOR_WG_0xB3,
  Directed_SENSOR_WG_0xB4,
  Directed_SENSOR_WG_0xB5,
  Directed_SENSOR_WG_0xB6,
  Directed_SENSOR_WG_0xB7,
  Directed_SENSOR_WG_0xB8,
  Directed_SENSOR_WG_0xB9,
  Directed_SENSOR_WG_0xBA,
  Directed_SENSOR_WG_0xBB,
  Directed_SENSOR_WG_0xBC,
  Directed_SENSOR_WG_0xBD,
  Directed_SENSOR_WG_0xBE,
  Directed_SENSOR_WG_0xBF,
 
  Directed_NON_SENSOR_WG_0xC0,
  Directed_NON_SENSOR_WG_0xC1,
  Directed_NON_SENSOR_WG_0xC2,
  Directed_NON_SENSOR_WG_0xC3,
  Directed_NON_SENSOR_WG_0xC4,
  Directed_NON_SENSOR_WG_0xC5,
  Directed_NON_SENSOR_WG_0xC6,
  Directed_NON_SENSOR_WG_0xC7,
  Directed_NON_SENSOR_WG_0xC8,
  Directed_NON_SENSOR_WG_0xC9,
  Directed_NON_SENSOR_WG_0xCA,
  Directed_NON_SENSOR_WG_0xCB,
  Directed_NON_SENSOR_WG_0xCC,
  Directed_NON_SENSOR_WG_0xCD,
  Directed_NON_SENSOR_WG_0xCE,
  Directed_NON_SENSOR_WG_0xCF,
  Directed_NON_SENSOR_WG_0xD0,
  Directed_NON_SENSOR_WG_0xD1,
  Directed_NON_SENSOR_WG_0xD2,
  Directed_NON_SENSOR_WG_0xD3,
  Directed_NON_SENSOR_WG_0xD4,
  Directed_NON_SENSOR_WG_0xD5,
  Directed_NON_SENSOR_WG_0xD6,
 
  Directed_DEBUG_WG_0xD7,
  Directed_DEBUG_WG_0xD8,
  Directed_DEBUG_WG_0xD9,
  Directed_DEBUG_WG_0xDA,
 
  Directed_RIO_WG_0xDB,
  Directed_RIO_WG_0xDC,
  Directed_RIO_WG_0xDD,
  Directed_RIO_WG_0xDE,
  Directed_RIO_WG_0xDF,
 
  Directed_DEVCAP,
  Directed_VENDOR_E1,
  Directed_VENDOR_E2,
  Directed_VENDOR_E3,
  Directed_VENDOR_E4,
  Directed_VENDOR_E5,
  Directed_VENDOR_E6,
  Directed_VENDOR_E7,
  Directed_VENDOR_E8,
  Directed_VENDOR_E9,
  Directed_VENDOR_EA,
  Directed_VENDOR_EB,
  Directed_VENDOR_EC,
  Directed_VENDOR_ED,
  Directed_VENDOR_EE,
  Directed_VENDOR_EF,
  Directed_VENDOR_F0,
  Directed_VENDOR_F1,
  Directed_VENDOR_F2,
  Directed_VENDOR_F3,
  Directed_VENDOR_F4,
  Directed_VENDOR_F5,
  Directed_VENDOR_F6,
  Directed_VENDOR_F7,
  Directed_VENDOR_F8,
  Directed_VENDOR_F9,
  Directed_VENDOR_FA,
  Directed_VENDOR_FB,
  Directed_VENDOR_FC,
  Directed_VENDOR_FD,
  Directed_VENDOR_FE,
  Directed_SENSOR_WG_FF,
 
  Hot_Join = 256,
  Private_Message = 257,
  IBI_OR_PVT_Message = 258,
  I2C_Message = 259,
  HDR_Exit_Pattern = 260,
  Slave_Reset_Pattern =261,
  Broadcast_Address = 262,
  NACK_Message=263,
  Address_Message=264,
  NA = -1,
}
export enum eCommandPattern { A, B }


export enum eFrameType {
  BROADCAST = 0,
  DIRECTED = 1,
  PRIVATE = 2,
  HOTJOIN = 3,
  I2C_MESSAGE = 4,
  MCTP = 5,
  MatershipRequest = 6,
  IBI = 7,
  NA = 8,
  HDRExitPattern = 9,
  SlaveResetPattern = 10,
  IBI_Response = 11,
  CTS = 12,
  Test_Pattern = 13,
  Ext_DUT = 14,
  GLITCH_Generator = 15
}

export enum eBufferTransfer {
  Private = 0,
  DDR = 1,
  TSP = 2,
  TSL = 3
}
export enum eResetPattern {
  Default,
  Test_Ack,
  Test_Tbit,
  Reserved
}
export enum eCTSFormats {
  NA,
  Test2_1_1,
  Test2_1_2,
  Test2_1_3_1,
  Test2_1_3_2,
  Test2_1_3_3,
  Test2_1_3_4,
  Test2_1_3_5,
  Test2_1_3_6,
  Test2_1_3_7
}

